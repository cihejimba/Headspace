apply plugin: 'com.android.application'

def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : -1
    println "VersionCode is set to $code"
    return code
}

def getVersionName = { ->
    def name = project.hasProperty('versionName') ? versionName : ""
    println "VersionName is set to $name"
    return name
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "org.quuux.headspace"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode getVersionCode()
        versionName getVersionName()
    }
    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword "xxx"
            keyAlias "quuux"
            keyPassword "xxx"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'com.android.support:recyclerview-v7:23.0.1'
    compile 'com.android.support:palette-v7:23.0.1'
    compile 'com.google.android.exoplayer:exoplayer:r1.4.2'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'org.ini4j:ini4j:0.5.4'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.sothree.slidinguppanel:library:3.1.1'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
}

task askForPasswords << {
    def password = new String(System.console().readPassword("\n\npassword: "))
    android.signingConfigs.release.storePassword = password
    android.signingConfigs.release.keyPassword = password
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}